
//入口函数实例化system类：生成windows窗口，初始化graphic类，设置windows消息循环，在消息循环里调用graphic的渲染函数。
#pragma comment(lib,"winmm.lib")
#include<Windows.h>


#define WINDOW_WIDTH  600
#define WINDOW_HEIGHT  400

#pragma comment(lib, "d3d9.lib")
#pragma comment(lib, "d3dx9.lib")

#include <windows.h>
#include <d3d9.h>
#include <d3dx9.h>

LPDIRECT3D9 g_pD3D = NULL;
LPDIRECT3DDEVICE9 g_pD3DDevice = NULL;
LPDIRECT3DVERTEXBUFFER9 g_pVB = NULL;
LPDIRECT3DINDEXBUFFER9 g_pIB = NULL;

#define WINDOW_WIDTH			800
#define WINDOW_HEIGHT			600
#define D3DFVF_CUSTOMVERTEX		(D3DFVF_XYZ | D3DFVF_DIFFUSE)
#define SAFE_RELEASE(p)			{ if ((p) != NULL) { (p)->Release(); (p) = NULL; } }

struct CUSTOMVERTEX
{
	FLOAT x, y, z;
	DWORD color;
};

HRESULT InitD3D(HWND hWnd)
{
	if ((g_pD3D = Direct3DCreate9(D3D_SDK_VERSION)) == NULL)
		return E_FAIL;

	D3DPRESENT_PARAMETERS d3dpp;
	ZeroMemory(&d3dpp, sizeof(d3dpp));
	d3dpp.Windowed = TRUE;
	d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
	d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;

	if (FAILED(g_pD3D->CreateDevice(D3DADAPTER_DEFAULT,
		D3DDEVTYPE_HAL,
		hWnd,
		D3DCREATE_SOFTWARE_VERTEXPROCESSING,
		&d3dpp,
		&g_pD3DDevice)))
		return E_FAIL;
	return S_OK;
}

HRESULT InitRes()
{
	g_pD3DDevice->CreateVertexBuffer(3 * sizeof(CUSTOMVERTEX),
		D3DUSAGE_WRITEONLY,
		D3DFVF_CUSTOMVERTEX,
		D3DPOOL_MANAGED,
		&g_pVB,
		0);

	g_pD3DDevice->CreateIndexBuffer(3 * sizeof(WORD),
		D3DUSAGE_WRITEONLY,
		D3DFMT_INDEX16,
		D3DPOOL_MANAGED,
		&g_pIB,
		0);

	CUSTOMVERTEX source_vertices[] = {
										{ -1.0f, -1.0f, 0.0f, D3DCOLOR_XRGB(255,   0,   0) },
										{  0.0f,  1.0f, 0.0f, D3DCOLOR_XRGB(0, 255,   0) },
										{  1.0f, -1.0f, 0.0f, D3DCOLOR_XRGB(0,   0, 255) }
	};

	CUSTOMVERTEX * pVertices = NULL;
	if (FAILED(g_pVB->Lock(0, 3 * sizeof(CUSTOMVERTEX), (void **)&pVertices, 0)))
		return E_FAIL;
	memcpy(pVertices, source_vertices, 3 * sizeof(CUSTOMVERTEX));
	g_pVB->Unlock();

	WORD * indices = NULL;
	g_pIB->Lock(0, 0, (void **)&indices, 0);
	indices[0] = 0; indices[1] = 1; indices[2] = 2;
	g_pIB->Unlock();

	D3DXVECTOR3 position(0.0f, 0.0f, -5.0f);
	D3DXVECTOR3 target(0.0f, 0.0f, 0.0f);
	D3DXVECTOR3 up(0.0f, 1.0f, 0.0f);
	D3DXMATRIX view;
	D3DXMatrixLookAtLH(&view, &position, &target, &up);
	g_pD3DDevice->SetTransform(D3DTS_VIEW, &view);

	D3DXMATRIX proj;
	D3DXMatrixPerspectiveFovLH(&proj, D3DX_PI * 0.5f, (float)WINDOW_WIDTH / (float)WINDOW_HEIGHT, 1.0f, 1000.0f);
	g_pD3DDevice->SetTransform(D3DTS_PROJECTION, &proj);

	g_pD3DDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
	g_pD3DDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
	return S_OK;
}

void Cleanup()
{
	SAFE_RELEASE(g_pVB);
	SAFE_RELEASE(g_pIB);
	SAFE_RELEASE(g_pD3DDevice);
	SAFE_RELEASE(g_pD3D);
}

void Render()
{
	g_pD3DDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(128, 128, 128), 1.0f, 0);

	if (SUCCEEDED(g_pD3DDevice->BeginScene()))
	{
		D3DXMATRIX matWorld_X;
		D3DXMatrixIdentity(&matWorld_X);
		D3DXMatrixRotationX(&matWorld_X, GetTickCount() / 500.0f);

		D3DXMATRIX matWorld_Y;
		D3DXMatrixIdentity(&matWorld_Y);
		D3DXMatrixRotationY(&matWorld_Y, GetTickCount() / 500.0f);

		D3DXMATRIX matWorld_Z;
		D3DXMatrixIdentity(&matWorld_Z);
		D3DXMatrixRotationZ(&matWorld_Z, GetTickCount() / 500.0f);

		g_pD3DDevice->SetTransform(D3DTS_WORLD, &(matWorld_X * matWorld_Y * matWorld_Z));
		g_pD3DDevice->SetStreamSource(0, g_pVB, 0, sizeof(CUSTOMVERTEX));
		g_pD3DDevice->SetFVF(D3DFVF_CUSTOMVERTEX);
		g_pD3DDevice->SetIndices(g_pIB);

		g_pD3DDevice->DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 0, 3, 0, 1);
		g_pD3DDevice->EndScene();
	}

	g_pD3DDevice->Present(NULL, NULL, NULL, NULL);
}

LRESULT WINAPI MsgProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_DESTROY:
		Cleanup();
		PostQuitMessage(0);
		return 0;
	}
	return DefWindowProc(hWnd, msg, wParam, lParam);
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow)
{
	WNDCLASSEX wc;

	wc.cbSize = sizeof(WNDCLASSEX);
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc = MsgProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = LoadIcon(hInstance, "");
	wc.hIconSm = LoadIcon(hInstance, "");
	wc.hCursor = LoadCursor(hInstance, "");
	wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wc.lpszMenuName = NULL;
	wc.lpszClassName = "Direct3D9 Example";

	RegisterClassEx(&wc);

	HWND hWnd = CreateWindowEx(NULL,
		"Direct3D9 Example",
		"Direct3D9 Example",
		WS_OVERLAPPEDWINDOW,
		100, 100, WINDOW_WIDTH, WINDOW_HEIGHT,
		NULL,
		NULL,
		wc.hInstance,
		NULL);

	if (SUCCEEDED(InitD3D(hWnd)))
	{
		if (SUCCEEDED(InitRes()))
		{
			ShowWindow(hWnd, SW_SHOWDEFAULT);
			UpdateWindow(hWnd);

			MSG msg;
			ZeroMemory(&msg, sizeof(msg));
			while (true)
			{
				if (PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE))
				{
					if (msg.message == WM_QUIT)
						break;

					if (GetMessage(&msg, NULL, 0, 0))
					{
						TranslateMessage(&msg);
						DispatchMessage(&msg);
					}
				}
				else
					Render();
			}
		}
	}
	UnregisterClass("Direct3D10 Example", wc.hInstance);
	return 0;
}



//C++ recorder:
类中私有中主要存储属于类的变量，公有中存储一些方法
